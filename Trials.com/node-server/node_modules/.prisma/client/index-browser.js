
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.8.1
 * Query Engine version: 34df67547cf5598f5a6cd3eb45f14ee70c3fb86f
 */
Prisma.prismaVersion = {
  client: "3.8.1",
  engine: "34df67547cf5598f5a6cd3eb45f14ee70c3fb86f"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.CreatorsScalarFieldEnum = makeEnum({
  creator: 'creator',
  nTracks: 'nTracks',
  average_track_rating: 'average_track_rating',
  average_track_length: 'average_track_length',
  average_track_consistency: 'average_track_consistency',
  average_track_ninja_level: 'average_track_ninja_level',
  average_track_ninja_points: 'average_track_ninja_points',
  average_track_faults: 'average_track_faults',
  total_track_rating: 'total_track_rating',
  total_track_length: 'total_track_length',
  total_track_consistency: 'total_track_consistency',
  total_track_ninja_level: 'total_track_ninja_level',
  total_track_ninja_points: 'total_track_ninja_points',
  total_track_faults: 'total_track_faults'
});

exports.Prisma.ProfilesScalarFieldEnum = makeEnum({
  email: 'email',
  id: 'id',
  create_date: 'create_date',
  country: 'country',
  region: 'region',
  gamertag: 'gamertag',
  aliases: 'aliases',
  username: 'username',
  highest_np_run: 'highest_np_run',
  runs: 'runs',
  total_ninja_points: 'total_ninja_points',
  highest_level_pass: 'highest_level_pass',
  bio: 'bio',
  banner_url: 'banner_url'
});

exports.Prisma.RunsScalarFieldEnum = makeEnum({
  rider: 'rider',
  rank: 'rank',
  faults: 'faults',
  time: 'time',
  track_name: 'track_name',
  ninja_points: 'ninja_points',
  ninja_level: 'ninja_level',
  length: 'length',
  consistency: 'consistency',
  rating: 'rating',
  creator: 'creator',
  id: 'id',
  date: 'date'
});

exports.Prisma.TracksScalarFieldEnum = makeEnum({
  track_name: 'track_name',
  creator: 'creator',
  ninja_level: 'ninja_level',
  length: 'length',
  average_faults: 'average_faults',
  consistency: 'consistency',
  rating: 'rating',
  nRuns: 'nRuns',
  total_rating: 'total_rating',
  total_consistency: 'total_consistency',
  total_length: 'total_length',
  total_faults: 'total_faults',
  total_ninja_level: 'total_ninja_level',
  average_np: 'average_np',
  total_np: 'total_np'
});

exports.Prisma.ProfileshistoryScalarFieldEnum = makeEnum({
  email: 'email',
  id: 'id',
  create_date: 'create_date',
  country: 'country',
  region: 'region',
  gamertag: 'gamertag',
  aliases: 'aliases',
  username: 'username',
  highest_np_run: 'highest_np_run',
  runs: 'runs',
  total_ninja_points: 'total_ninja_points',
  highest_level_pass: 'highest_level_pass',
  bio: 'bio',
  history_dates: 'history_dates',
  index: 'index',
  banner_url: 'banner_url'
});

exports.Prisma.RunshistoryScalarFieldEnum = makeEnum({
  rider: 'rider',
  rank: 'rank',
  faults: 'faults',
  time: 'time',
  track_name: 'track_name',
  ninja_points: 'ninja_points',
  ninja_level: 'ninja_level',
  length: 'length',
  consistency: 'consistency',
  rating: 'rating',
  creator: 'creator',
  id: 'id',
  date: 'date',
  history_dates: 'history_dates',
  index: 'index'
});

exports.Prisma.TrackshistoryScalarFieldEnum = makeEnum({
  track_name: 'track_name',
  creator: 'creator',
  ninja_level: 'ninja_level',
  length: 'length',
  average_faults: 'average_faults',
  consistency: 'consistency',
  rating: 'rating',
  nRuns: 'nRuns',
  total_rating: 'total_rating',
  total_consistency: 'total_consistency',
  total_length: 'total_length',
  total_faults: 'total_faults',
  total_ninja_level: 'total_ninja_level',
  average_np: 'average_np',
  total_np: 'total_np',
  history_dates: 'history_dates',
  index: 'index'
});

exports.Prisma.CreatorshistoryScalarFieldEnum = makeEnum({
  creator: 'creator',
  nTracks: 'nTracks',
  average_track_rating: 'average_track_rating',
  average_track_length: 'average_track_length',
  average_track_consistency: 'average_track_consistency',
  average_track_ninja_level: 'average_track_ninja_level',
  average_track_ninja_points: 'average_track_ninja_points',
  average_track_faults: 'average_track_faults',
  history_dates: 'history_dates',
  total_track_rating: 'total_track_rating',
  total_track_length: 'total_track_length',
  total_track_consistency: 'total_track_consistency',
  total_track_ninja_level: 'total_track_ninja_level',
  total_track_ninja_points: 'total_track_ninja_points',
  total_track_faults: 'total_track_faults'
});

exports.Prisma.TestScalarFieldEnum = makeEnum({
  test: 'test'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});
exports.runs_length = makeEnum({
  Short: 'Short',
  Medium: 'Medium',
  Long: 'Long'
});

exports.runs_consistency = makeEnum({
  Not_At_All: 'Not_At_All',
  Not_Very: 'Not_Very',
  Moderately: 'Moderately',
  Very: 'Very',
  Extremely: 'Extremely'
});

exports.runshistory_length = makeEnum({
  Short: 'Short',
  Medium: 'Medium',
  Long: 'Long'
});

exports.runshistory_consistency = makeEnum({
  Not_At_All: 'Not_At_All',
  Not_Very: 'Not_Very',
  Moderately: 'Moderately',
  Very: 'Very',
  Extremely: 'Extremely'
});

exports.Prisma.ModelName = makeEnum({
  creators: 'creators',
  profiles: 'profiles',
  runs: 'runs',
  tracks: 'tracks',
  profileshistory: 'profileshistory',
  runshistory: 'runshistory',
  trackshistory: 'trackshistory',
  creatorshistory: 'creatorshistory',
  test: 'test'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
