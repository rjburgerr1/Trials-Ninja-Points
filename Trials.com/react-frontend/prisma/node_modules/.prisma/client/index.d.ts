
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';

export import DMMF = runtime.DMMF

/**
 * Prisma Errors
 */
export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
export import PrismaClientValidationError = runtime.PrismaClientValidationError

/**
 * Re-export of sql-template-tag
 */
export import sql = runtime.sqltag
export import empty = runtime.empty
export import join = runtime.join
export import raw = runtime.raw
export import Sql = runtime.Sql

/**
 * Decimal.js
 */
export import Decimal = runtime.Decimal

/**
 * Prisma Client JS version: 2.14.0
 * Query Engine version: 5d491261d382a2a5ffdc71de17072b0e409f1cc1
 */
export type PrismaVersion = {
  client: string
}

export const prismaVersion: PrismaVersion 

/**
 * Utility Types
 */

/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON object.
 * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
 */
export type JsonObject = {[Key in string]?: JsonValue}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON array.
 */
export interface JsonArray extends Array<JsonValue> {}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches any valid JSON value.
 */
export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

/**
 * Same as JsonObject, but allows undefined
 */
export type InputJsonObject = {[Key in string]?: JsonValue}
 
export interface InputJsonArray extends Array<JsonValue> {}
 
export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
 type SelectAndInclude = {
  select: any
  include: any
}
type HasSelect = {
  select: any
}
type HasInclude = {
  include: any
}
type CheckSelect<T, S, U> = T extends SelectAndInclude
  ? 'Please either choose `select` or `include`'
  : T extends HasSelect
  ? U
  : T extends HasInclude
  ? U
  : S

/**
 * Get the type of the value, that the Promise holds.
 */
export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

/**
 * Get the return type of a function which returns a Promise.
 */
export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


export type Enumerable<T> = T | Array<T>;

export type RequiredKeys<T> = {
  [K in keyof T]-?: {} extends Pick<T, K> ? never : K
}[keyof T]

export type TruthyKeys<T> = {
  [key in keyof T]: T[key] extends false | undefined | null ? never : key
}[keyof T]

export type TrueKeys<T> = TruthyKeys<Pick<T, RequiredKeys<T>>>

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

/**
 * Subset + Intersection
 * @desc From `T` pick properties that exist in `U` and intersect `K`
 */
export type SubsetIntersection<T, U, K> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  K

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


/**
 * Is T a Record?
 */
type IsObject<T extends any> = T extends Array<any>
? False
: T extends Date
? False
: T extends Buffer
? False
: T extends BigInt
? False
: T extends object
? True
: False


/**
 * If it's T[], return T
 */
export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

/**
 * From ts-toolbelt
 */

export type Union = any

/** Helper Types for "Merge" **/
export type IntersectOf<U extends Union> = (
  U extends unknown ? (k: U) => void : never
) extends (k: infer I) => void
  ? I
  : never

export type Overwrite<O extends object, O1 extends object> = {
    [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
} & {};

type _Merge<U extends object> = IntersectOf<Overwrite<U, {
    [K in keyof U]-?: At<U, K>;
}>>;

type Key = string | number | symbol;
type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
type AtStrict<O extends object, K extends Key> = O[K & keyof O];
type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
    1: AtStrict<O, K>;
    0: AtLoose<O, K>;
}[strict];

export type ComputeRaw<A extends any> = A extends Function ? A : {
  [K in keyof A]: A[K];
} & {};

export type OptionalFlat<O> = {
  [K in keyof O]?: O[K];
} & {};

type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<Record<Exclude<Keys<_U>, keyof U>, never>> : never;

export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
/** End Helper Types for "Merge" **/

export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

/**
A [[Boolean]]
*/
export type Boolean = True | False

// /**
// 1
// */
export type True = 1

/**
0
*/
export type False = 0

export type Not<B extends Boolean> = {
  0: 1
  1: 0
}[B]

export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
  ? 0 // anything `never` is false
  : A1 extends A2
  ? 1
  : 0

export type Has<U extends Union, U1 extends Union> = Not<
  Extends<Exclude<U1, U>, U1>
>

export type Or<B1 extends Boolean, B2 extends Boolean> = {
  0: {
    0: 0
    1: 1
  }
  1: {
    0: 1
    1: 1
  }
}[B1][B2]

export type Keys<U extends Union> = U extends unknown ? keyof U : never



/**
 * Used by group by
 */

export type GetScalarType<T, O> = O extends object ? {
  [P in keyof T]: P extends keyof O
    ? O[P]
    : never
} : never

type FieldPaths<
  T,
  U = Omit<T, 'avg' | 'sum' | 'count' | 'min' | 'max'>
> = IsObject<T> extends True ? U : T

type GetHavingFields<T> = {
  [K in keyof T]: Or<
    Or<Extends<'OR', K>, Extends<'AND', K>>,
    Extends<'NOT', K>
  > extends True
    ? // infer is only needed to not hit TS limit
      // based on the brilliant idea of Pierre-Antoine Mills
      // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
      T[K] extends infer TK
      ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
      : never
    : {} extends FieldPaths<T[K]>
    ? never
    : K
}[keyof T]

/**
 * Convert tuple to union
 */
type _TupleToUnion<T> = T extends (infer E)[] ? E : never
type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

/**
 * Like `Pick`, but with an array
 */
type PickArray<T, K extends Array<keyof T>> = Pick<T, TupleToUnion<K>>





/**
 * Model runs
 */

export type runs = {
  rider: string
  rank: number | null
  faults: number
  time: string
  trackName: string
  ninjaPoints: number | null
  ninjaLevel: number
  length: runs_length
  faultSponginess: runs_fault_sponginess
  rating: number | null
}

/**
 * Model tracks
 */

export type tracks = {
  track_name: string
  id: number
  creator: string
  ninja_level: string | null
  length: tracks_length | null
  average_faults: number | null
  fault_sponginess: tracks_fault_sponginess | null
}

/**
 * Model riders
 */

export type riders = {
  rider: string
}

/**
 * Model profiles
 */

export type profiles = {
  email: string
  id: string
  create_date: Date
  country: string | null
  state: string | null
  gamertag: string | null
  aliases: string | null
  username: string
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const runs_length: {
  Short: 'Short',
  Medium: 'Medium',
  Long: 'Long'
};

export type runs_length = (typeof runs_length)[keyof typeof runs_length]


export const runs_fault_sponginess: {
  Not_At_All: 'Not_At_All',
  Not_Very: 'Not_Very',
  Moderately: 'Moderately',
  Very: 'Very',
  Extremely: 'Extremely'
};

export type runs_fault_sponginess = (typeof runs_fault_sponginess)[keyof typeof runs_fault_sponginess]


export const tracks_length: {
  short: 'short',
  medium: 'medium',
  long: 'long'
};

export type tracks_length = (typeof tracks_length)[keyof typeof tracks_length]


export const tracks_fault_sponginess: {
  not_at_all: 'not_at_all',
  not_very: 'not_very',
  moderately: 'moderately',
  very: 'very',
  extremely: 'extremely'
};

export type tracks_fault_sponginess = (typeof tracks_fault_sponginess)[keyof typeof tracks_fault_sponginess]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Runs
 * const runs = await prisma.runs.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Runs
   * const runs = await prisma.runs.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: T);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): Promise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): Promise<T>;

  /**
   * Execute queries in a transaction
   * @example
   * ```
   * const [george, bob, alice] = await prisma.transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   */
  $transaction: PromiseConstructor['all']

      /**
   * `prisma.runs`: Exposes CRUD operations for the **runs** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Runs
    * const runs = await prisma.runs.findMany()
    * ```
    */
  get runs(): Prisma.runsDelegate;

  /**
   * `prisma.tracks`: Exposes CRUD operations for the **tracks** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tracks
    * const tracks = await prisma.tracks.findMany()
    * ```
    */
  get tracks(): Prisma.tracksDelegate;

  /**
   * `prisma.riders`: Exposes CRUD operations for the **riders** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Riders
    * const riders = await prisma.riders.findMany()
    * ```
    */
  get riders(): Prisma.ridersDelegate;

  /**
   * `prisma.profiles`: Exposes CRUD operations for the **profiles** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Profiles
    * const profiles = await prisma.profiles.findMany()
    * ```
    */
  get profiles(): Prisma.profilesDelegate;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.14.0
   * Query Engine version: 5d491261d382a2a5ffdc71de17072b0e409f1cc1
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  export type Union = any

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, 'avg' | 'sum' | 'count' | 'min' | 'max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Pick<T, TupleToUnion<K>>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    runs: 'runs',
    tracks: 'tracks',
    riders: 'riders',
    profiles: 'profiles'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }


  /**
   * Model runs
   */


  export type AggregateRuns = {
    count: number | null
    avg: RunsAvgAggregateOutputType | null
    sum: RunsSumAggregateOutputType | null
    min: RunsMinAggregateOutputType | null
    max: RunsMaxAggregateOutputType | null
  }

  export type RunsAvgAggregateOutputType = {
    rank: number | null
    faults: number
    ninjaPoints: number | null
    ninjaLevel: number
    rating: number | null
  }

  export type RunsSumAggregateOutputType = {
    rank: number | null
    faults: number
    ninjaPoints: number | null
    ninjaLevel: number
    rating: number | null
  }

  export type RunsMinAggregateOutputType = {
    rider: string | null
    rank: number | null
    faults: number
    time: string | null
    trackName: string | null
    ninjaPoints: number | null
    ninjaLevel: number
    length: runs_length | null
    faultSponginess: runs_fault_sponginess | null
    rating: number | null
  }

  export type RunsMaxAggregateOutputType = {
    rider: string | null
    rank: number | null
    faults: number
    time: string | null
    trackName: string | null
    ninjaPoints: number | null
    ninjaLevel: number
    length: runs_length | null
    faultSponginess: runs_fault_sponginess | null
    rating: number | null
  }

  export type RunsCountAggregateOutputType = {
    rider: number | null
    rank: number | null
    faults: number
    time: number | null
    trackName: number | null
    ninjaPoints: number | null
    ninjaLevel: number
    length: number | null
    faultSponginess: number | null
    rating: number | null
    _all: number
  }


  export type RunsAvgAggregateInputType = {
    rank?: true
    faults?: true
    ninjaPoints?: true
    ninjaLevel?: true
    rating?: true
  }

  export type RunsSumAggregateInputType = {
    rank?: true
    faults?: true
    ninjaPoints?: true
    ninjaLevel?: true
    rating?: true
  }

  export type RunsMinAggregateInputType = {
    rider?: true
    rank?: true
    faults?: true
    time?: true
    trackName?: true
    ninjaPoints?: true
    ninjaLevel?: true
    length?: true
    faultSponginess?: true
    rating?: true
  }

  export type RunsMaxAggregateInputType = {
    rider?: true
    rank?: true
    faults?: true
    time?: true
    trackName?: true
    ninjaPoints?: true
    ninjaLevel?: true
    length?: true
    faultSponginess?: true
    rating?: true
  }

  export type RunsCountAggregateInputType = {
    rider?: true
    rank?: true
    faults?: true
    time?: true
    trackName?: true
    ninjaPoints?: true
    ninjaLevel?: true
    length?: true
    faultSponginess?: true
    rating?: true
    _all?: true
  }

  export type AggregateRunsArgs = {
    /**
     * Filter which runs to aggregate.
    **/
    where?: runsWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of runs to fetch.
    **/
    orderBy?: Enumerable<runsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: runsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` runs from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` runs.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned runs
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: RunsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: RunsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: RunsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: RunsMaxAggregateInputType
  }

  export type GetRunsAggregateType<T extends AggregateRunsArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetRunsAggregateScalarType<T[P]>
  }

  export type GetRunsAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof RunsAvgAggregateOutputType ? RunsAvgAggregateOutputType[P] : never
  }

    



  export type runsSelect = {
    rider?: boolean
    rank?: boolean
    faults?: boolean
    time?: boolean
    trackName?: boolean
    ninjaPoints?: boolean
    ninjaLevel?: boolean
    length?: boolean
    faultSponginess?: boolean
    rating?: boolean
    riders?: boolean | ridersArgs
  }

  export type runsInclude = {
    riders?: boolean | ridersArgs
  }

  export type runsGetPayload<
    S extends boolean | null | undefined | runsArgs,
    U = keyof S
      > = S extends true
        ? runs
    : S extends undefined
    ? never
    : S extends runsArgs | FindManyrunsArgs
    ?'include' extends U
    ? runs  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'riders'
        ? ridersGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof runs ?runs [P]
  : 
          P extends 'riders'
        ? ridersGetPayload<S['select'][P]> : never
  } 
    : runs
  : runs


  export interface runsDelegate {
    /**
     * Find zero or one Runs that matches the filter.
     * @param {FindUniquerunsArgs} args - Arguments to find a Runs
     * @example
     * // Get one Runs
     * const runs = await prisma.runs.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniquerunsArgs>(
      args: Subset<T, FindUniquerunsArgs>
    ): CheckSelect<T, Prisma__runsClient<runs | null>, Prisma__runsClient<runsGetPayload<T> | null>>

    /**
     * Find the first Runs that matches the filter.
     * @param {FindFirstrunsArgs} args - Arguments to find a Runs
     * @example
     * // Get one Runs
     * const runs = await prisma.runs.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstrunsArgs>(
      args?: Subset<T, FindFirstrunsArgs>
    ): CheckSelect<T, Prisma__runsClient<runs | null>, Prisma__runsClient<runsGetPayload<T> | null>>

    /**
     * Find zero or more Runs that matches the filter.
     * @param {FindManyrunsArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Runs
     * const runs = await prisma.runs.findMany()
     * 
     * // Get first 10 Runs
     * const runs = await prisma.runs.findMany({ take: 10 })
     * 
     * // Only select the `rider`
     * const runsWithRiderOnly = await prisma.runs.findMany({ select: { rider: true } })
     * 
    **/
    findMany<T extends FindManyrunsArgs>(
      args?: Subset<T, FindManyrunsArgs>
    ): CheckSelect<T, Promise<Array<runs>>, Promise<Array<runsGetPayload<T>>>>

    /**
     * Create a Runs.
     * @param {runsCreateArgs} args - Arguments to create a Runs.
     * @example
     * // Create one Runs
     * const Runs = await prisma.runs.create({
     *   data: {
     *     // ... data to create a Runs
     *   }
     * })
     * 
    **/
    create<T extends runsCreateArgs>(
      args: Subset<T, runsCreateArgs>
    ): CheckSelect<T, Prisma__runsClient<runs>, Prisma__runsClient<runsGetPayload<T>>>

    /**
     * Delete a Runs.
     * @param {runsDeleteArgs} args - Arguments to delete one Runs.
     * @example
     * // Delete one Runs
     * const Runs = await prisma.runs.delete({
     *   where: {
     *     // ... filter to delete one Runs
     *   }
     * })
     * 
    **/
    delete<T extends runsDeleteArgs>(
      args: Subset<T, runsDeleteArgs>
    ): CheckSelect<T, Prisma__runsClient<runs>, Prisma__runsClient<runsGetPayload<T>>>

    /**
     * Update one Runs.
     * @param {runsUpdateArgs} args - Arguments to update one Runs.
     * @example
     * // Update one Runs
     * const runs = await prisma.runs.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends runsUpdateArgs>(
      args: Subset<T, runsUpdateArgs>
    ): CheckSelect<T, Prisma__runsClient<runs>, Prisma__runsClient<runsGetPayload<T>>>

    /**
     * Delete zero or more Runs.
     * @param {runsDeleteManyArgs} args - Arguments to filter Runs to delete.
     * @example
     * // Delete a few Runs
     * const { count } = await prisma.runs.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends runsDeleteManyArgs>(
      args?: Subset<T, runsDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Runs.
     * @param {runsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Runs
     * const runs = await prisma.runs.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends runsUpdateManyArgs>(
      args: Subset<T, runsUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Runs.
     * @param {runsUpsertArgs} args - Arguments to update or create a Runs.
     * @example
     * // Update or create a Runs
     * const runs = await prisma.runs.upsert({
     *   create: {
     *     // ... data to create a Runs
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Runs we want to update
     *   }
     * })
    **/
    upsert<T extends runsUpsertArgs>(
      args: Subset<T, runsUpsertArgs>
    ): CheckSelect<T, Prisma__runsClient<runs>, Prisma__runsClient<runsGetPayload<T>>>

    /**
     * Find zero or one Runs that matches the filter.
     * @param {FindUniquerunsArgs} args - Arguments to find a Runs
     * @deprecated This will be deprecated please use prisma.runs.findUnique
     * @example
     * // Get one Runs
     * const runs = await prisma.runs.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniquerunsArgs>(
      args: Subset<T, FindUniquerunsArgs>
    ): CheckSelect<T, Prisma__runsClient<runs | null>, Prisma__runsClient<runsGetPayload<T> | null>>

    /**
     * Count the number of Runs.
     * @param {FindManyrunsArgs} args - Arguments to filter Runs to count.
     * @example
     * // Count the number of Runs
     * const count = await prisma.runs.count({
     *   where: {
     *     // ... the filter for the Runs we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManyrunsArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a Runs.
     * @param {AggregateRunsArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateRunsArgs>(args: Subset<T, AggregateRunsArgs>): Promise<GetRunsAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for runs.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__runsClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    riders<T extends ridersArgs = {}>(args?: Subset<T, ridersArgs>): CheckSelect<T, Prisma__ridersClient<riders | null>, Prisma__ridersClient<ridersGetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * runs findUnique
   */
  export type FindUniquerunsArgs = {
    /**
     * Select specific fields to fetch from the runs
    **/
    select?: runsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: runsInclude | null
    /**
     * Filter, which runs to fetch.
    **/
    where: runsWhereUniqueInput
  }


  /**
   * runs findFirst
   */
  export type FindFirstrunsArgs = {
    /**
     * Select specific fields to fetch from the runs
    **/
    select?: runsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: runsInclude | null
    /**
     * Filter, which runs to fetch.
    **/
    where?: runsWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of runs to fetch.
    **/
    orderBy?: Enumerable<runsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for runs.
    **/
    cursor?: runsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` runs from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` runs.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of runs.
    **/
    distinct?: Enumerable<RunsScalarFieldEnum>
  }


  /**
   * runs findMany
   */
  export type FindManyrunsArgs = {
    /**
     * Select specific fields to fetch from the runs
    **/
    select?: runsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: runsInclude | null
    /**
     * Filter, which runs to fetch.
    **/
    where?: runsWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of runs to fetch.
    **/
    orderBy?: Enumerable<runsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing runs.
    **/
    cursor?: runsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` runs from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` runs.
    **/
    skip?: number
    distinct?: Enumerable<RunsScalarFieldEnum>
  }


  /**
   * runs create
   */
  export type runsCreateArgs = {
    /**
     * Select specific fields to fetch from the runs
    **/
    select?: runsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: runsInclude | null
    /**
     * The data needed to create a runs.
    **/
    data: runsCreateInput
  }


  /**
   * runs update
   */
  export type runsUpdateArgs = {
    /**
     * Select specific fields to fetch from the runs
    **/
    select?: runsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: runsInclude | null
    /**
     * The data needed to update a runs.
    **/
    data: runsUpdateInput
    /**
     * Choose, which runs to update.
    **/
    where: runsWhereUniqueInput
  }


  /**
   * runs updateMany
   */
  export type runsUpdateManyArgs = {
    data: runsUpdateManyMutationInput
    where?: runsWhereInput
  }


  /**
   * runs upsert
   */
  export type runsUpsertArgs = {
    /**
     * Select specific fields to fetch from the runs
    **/
    select?: runsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: runsInclude | null
    /**
     * The filter to search for the runs to update in case it exists.
    **/
    where: runsWhereUniqueInput
    /**
     * In case the runs found by the `where` argument doesn't exist, create a new runs with this data.
    **/
    create: runsCreateInput
    /**
     * In case the runs was found with the provided `where` argument, update it with this data.
    **/
    update: runsUpdateInput
  }


  /**
   * runs delete
   */
  export type runsDeleteArgs = {
    /**
     * Select specific fields to fetch from the runs
    **/
    select?: runsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: runsInclude | null
    /**
     * Filter which runs to delete.
    **/
    where: runsWhereUniqueInput
  }


  /**
   * runs deleteMany
   */
  export type runsDeleteManyArgs = {
    where?: runsWhereInput
  }


  /**
   * runs without action
   */
  export type runsArgs = {
    /**
     * Select specific fields to fetch from the runs
    **/
    select?: runsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: runsInclude | null
  }



  /**
   * Model tracks
   */


  export type AggregateTracks = {
    count: number | null
    avg: TracksAvgAggregateOutputType | null
    sum: TracksSumAggregateOutputType | null
    min: TracksMinAggregateOutputType | null
    max: TracksMaxAggregateOutputType | null
  }

  export type TracksAvgAggregateOutputType = {
    id: number
    average_faults: number | null
  }

  export type TracksSumAggregateOutputType = {
    id: number
    average_faults: number | null
  }

  export type TracksMinAggregateOutputType = {
    track_name: string | null
    id: number
    creator: string | null
    ninja_level: string | null
    length: tracks_length | null
    average_faults: number | null
    fault_sponginess: tracks_fault_sponginess | null
  }

  export type TracksMaxAggregateOutputType = {
    track_name: string | null
    id: number
    creator: string | null
    ninja_level: string | null
    length: tracks_length | null
    average_faults: number | null
    fault_sponginess: tracks_fault_sponginess | null
  }

  export type TracksCountAggregateOutputType = {
    track_name: number | null
    id: number
    creator: number | null
    ninja_level: number | null
    length: number | null
    average_faults: number | null
    fault_sponginess: number | null
    _all: number
  }


  export type TracksAvgAggregateInputType = {
    id?: true
    average_faults?: true
  }

  export type TracksSumAggregateInputType = {
    id?: true
    average_faults?: true
  }

  export type TracksMinAggregateInputType = {
    track_name?: true
    id?: true
    creator?: true
    ninja_level?: true
    length?: true
    average_faults?: true
    fault_sponginess?: true
  }

  export type TracksMaxAggregateInputType = {
    track_name?: true
    id?: true
    creator?: true
    ninja_level?: true
    length?: true
    average_faults?: true
    fault_sponginess?: true
  }

  export type TracksCountAggregateInputType = {
    track_name?: true
    id?: true
    creator?: true
    ninja_level?: true
    length?: true
    average_faults?: true
    fault_sponginess?: true
    _all?: true
  }

  export type AggregateTracksArgs = {
    /**
     * Filter which tracks to aggregate.
    **/
    where?: tracksWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of tracks to fetch.
    **/
    orderBy?: Enumerable<tracksOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: tracksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tracks from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tracks.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tracks
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: TracksAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: TracksSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: TracksMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: TracksMaxAggregateInputType
  }

  export type GetTracksAggregateType<T extends AggregateTracksArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetTracksAggregateScalarType<T[P]>
  }

  export type GetTracksAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof TracksAvgAggregateOutputType ? TracksAvgAggregateOutputType[P] : never
  }

    



  export type tracksSelect = {
    track_name?: boolean
    id?: boolean
    creator?: boolean
    ninja_level?: boolean
    length?: boolean
    average_faults?: boolean
    fault_sponginess?: boolean
  }

  export type tracksGetPayload<
    S extends boolean | null | undefined | tracksArgs,
    U = keyof S
      > = S extends true
        ? tracks
    : S extends undefined
    ? never
    : S extends tracksArgs | FindManytracksArgs
    ?'include' extends U
    ? tracks 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof tracks ?tracks [P]
  : 
     never
  } 
    : tracks
  : tracks


  export interface tracksDelegate {
    /**
     * Find zero or one Tracks that matches the filter.
     * @param {FindUniquetracksArgs} args - Arguments to find a Tracks
     * @example
     * // Get one Tracks
     * const tracks = await prisma.tracks.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniquetracksArgs>(
      args: Subset<T, FindUniquetracksArgs>
    ): CheckSelect<T, Prisma__tracksClient<tracks | null>, Prisma__tracksClient<tracksGetPayload<T> | null>>

    /**
     * Find the first Tracks that matches the filter.
     * @param {FindFirsttracksArgs} args - Arguments to find a Tracks
     * @example
     * // Get one Tracks
     * const tracks = await prisma.tracks.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirsttracksArgs>(
      args?: Subset<T, FindFirsttracksArgs>
    ): CheckSelect<T, Prisma__tracksClient<tracks | null>, Prisma__tracksClient<tracksGetPayload<T> | null>>

    /**
     * Find zero or more Tracks that matches the filter.
     * @param {FindManytracksArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tracks
     * const tracks = await prisma.tracks.findMany()
     * 
     * // Get first 10 Tracks
     * const tracks = await prisma.tracks.findMany({ take: 10 })
     * 
     * // Only select the `track_name`
     * const tracksWithTrack_nameOnly = await prisma.tracks.findMany({ select: { track_name: true } })
     * 
    **/
    findMany<T extends FindManytracksArgs>(
      args?: Subset<T, FindManytracksArgs>
    ): CheckSelect<T, Promise<Array<tracks>>, Promise<Array<tracksGetPayload<T>>>>

    /**
     * Create a Tracks.
     * @param {tracksCreateArgs} args - Arguments to create a Tracks.
     * @example
     * // Create one Tracks
     * const Tracks = await prisma.tracks.create({
     *   data: {
     *     // ... data to create a Tracks
     *   }
     * })
     * 
    **/
    create<T extends tracksCreateArgs>(
      args: Subset<T, tracksCreateArgs>
    ): CheckSelect<T, Prisma__tracksClient<tracks>, Prisma__tracksClient<tracksGetPayload<T>>>

    /**
     * Delete a Tracks.
     * @param {tracksDeleteArgs} args - Arguments to delete one Tracks.
     * @example
     * // Delete one Tracks
     * const Tracks = await prisma.tracks.delete({
     *   where: {
     *     // ... filter to delete one Tracks
     *   }
     * })
     * 
    **/
    delete<T extends tracksDeleteArgs>(
      args: Subset<T, tracksDeleteArgs>
    ): CheckSelect<T, Prisma__tracksClient<tracks>, Prisma__tracksClient<tracksGetPayload<T>>>

    /**
     * Update one Tracks.
     * @param {tracksUpdateArgs} args - Arguments to update one Tracks.
     * @example
     * // Update one Tracks
     * const tracks = await prisma.tracks.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends tracksUpdateArgs>(
      args: Subset<T, tracksUpdateArgs>
    ): CheckSelect<T, Prisma__tracksClient<tracks>, Prisma__tracksClient<tracksGetPayload<T>>>

    /**
     * Delete zero or more Tracks.
     * @param {tracksDeleteManyArgs} args - Arguments to filter Tracks to delete.
     * @example
     * // Delete a few Tracks
     * const { count } = await prisma.tracks.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends tracksDeleteManyArgs>(
      args?: Subset<T, tracksDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Tracks.
     * @param {tracksUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tracks
     * const tracks = await prisma.tracks.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends tracksUpdateManyArgs>(
      args: Subset<T, tracksUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Tracks.
     * @param {tracksUpsertArgs} args - Arguments to update or create a Tracks.
     * @example
     * // Update or create a Tracks
     * const tracks = await prisma.tracks.upsert({
     *   create: {
     *     // ... data to create a Tracks
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tracks we want to update
     *   }
     * })
    **/
    upsert<T extends tracksUpsertArgs>(
      args: Subset<T, tracksUpsertArgs>
    ): CheckSelect<T, Prisma__tracksClient<tracks>, Prisma__tracksClient<tracksGetPayload<T>>>

    /**
     * Find zero or one Tracks that matches the filter.
     * @param {FindUniquetracksArgs} args - Arguments to find a Tracks
     * @deprecated This will be deprecated please use prisma.tracks.findUnique
     * @example
     * // Get one Tracks
     * const tracks = await prisma.tracks.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniquetracksArgs>(
      args: Subset<T, FindUniquetracksArgs>
    ): CheckSelect<T, Prisma__tracksClient<tracks | null>, Prisma__tracksClient<tracksGetPayload<T> | null>>

    /**
     * Count the number of Tracks.
     * @param {FindManytracksArgs} args - Arguments to filter Tracks to count.
     * @example
     * // Count the number of Tracks
     * const count = await prisma.tracks.count({
     *   where: {
     *     // ... the filter for the Tracks we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManytracksArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a Tracks.
     * @param {AggregateTracksArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateTracksArgs>(args: Subset<T, AggregateTracksArgs>): Promise<GetTracksAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for tracks.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__tracksClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * tracks findUnique
   */
  export type FindUniquetracksArgs = {
    /**
     * Select specific fields to fetch from the tracks
    **/
    select?: tracksSelect | null
    /**
     * Filter, which tracks to fetch.
    **/
    where: tracksWhereUniqueInput
  }


  /**
   * tracks findFirst
   */
  export type FindFirsttracksArgs = {
    /**
     * Select specific fields to fetch from the tracks
    **/
    select?: tracksSelect | null
    /**
     * Filter, which tracks to fetch.
    **/
    where?: tracksWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of tracks to fetch.
    **/
    orderBy?: Enumerable<tracksOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tracks.
    **/
    cursor?: tracksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tracks from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tracks.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of tracks.
    **/
    distinct?: Enumerable<TracksScalarFieldEnum>
  }


  /**
   * tracks findMany
   */
  export type FindManytracksArgs = {
    /**
     * Select specific fields to fetch from the tracks
    **/
    select?: tracksSelect | null
    /**
     * Filter, which tracks to fetch.
    **/
    where?: tracksWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of tracks to fetch.
    **/
    orderBy?: Enumerable<tracksOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tracks.
    **/
    cursor?: tracksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tracks from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tracks.
    **/
    skip?: number
    distinct?: Enumerable<TracksScalarFieldEnum>
  }


  /**
   * tracks create
   */
  export type tracksCreateArgs = {
    /**
     * Select specific fields to fetch from the tracks
    **/
    select?: tracksSelect | null
    /**
     * The data needed to create a tracks.
    **/
    data: tracksCreateInput
  }


  /**
   * tracks update
   */
  export type tracksUpdateArgs = {
    /**
     * Select specific fields to fetch from the tracks
    **/
    select?: tracksSelect | null
    /**
     * The data needed to update a tracks.
    **/
    data: tracksUpdateInput
    /**
     * Choose, which tracks to update.
    **/
    where: tracksWhereUniqueInput
  }


  /**
   * tracks updateMany
   */
  export type tracksUpdateManyArgs = {
    data: tracksUpdateManyMutationInput
    where?: tracksWhereInput
  }


  /**
   * tracks upsert
   */
  export type tracksUpsertArgs = {
    /**
     * Select specific fields to fetch from the tracks
    **/
    select?: tracksSelect | null
    /**
     * The filter to search for the tracks to update in case it exists.
    **/
    where: tracksWhereUniqueInput
    /**
     * In case the tracks found by the `where` argument doesn't exist, create a new tracks with this data.
    **/
    create: tracksCreateInput
    /**
     * In case the tracks was found with the provided `where` argument, update it with this data.
    **/
    update: tracksUpdateInput
  }


  /**
   * tracks delete
   */
  export type tracksDeleteArgs = {
    /**
     * Select specific fields to fetch from the tracks
    **/
    select?: tracksSelect | null
    /**
     * Filter which tracks to delete.
    **/
    where: tracksWhereUniqueInput
  }


  /**
   * tracks deleteMany
   */
  export type tracksDeleteManyArgs = {
    where?: tracksWhereInput
  }


  /**
   * tracks without action
   */
  export type tracksArgs = {
    /**
     * Select specific fields to fetch from the tracks
    **/
    select?: tracksSelect | null
  }



  /**
   * Model riders
   */


  export type AggregateRiders = {
    count: number | null
    min: RidersMinAggregateOutputType | null
    max: RidersMaxAggregateOutputType | null
  }

  export type RidersMinAggregateOutputType = {
    rider: string | null
  }

  export type RidersMaxAggregateOutputType = {
    rider: string | null
  }

  export type RidersCountAggregateOutputType = {
    rider: number | null
    _all: number
  }


  export type RidersMinAggregateInputType = {
    rider?: true
  }

  export type RidersMaxAggregateInputType = {
    rider?: true
  }

  export type RidersCountAggregateInputType = {
    rider?: true
    _all?: true
  }

  export type AggregateRidersArgs = {
    /**
     * Filter which riders to aggregate.
    **/
    where?: ridersWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of riders to fetch.
    **/
    orderBy?: Enumerable<ridersOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: ridersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` riders from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` riders.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned riders
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: RidersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: RidersMaxAggregateInputType
  }

  export type GetRidersAggregateType<T extends AggregateRidersArgs> = {
    [P in keyof T]: P extends 'count' ? number : never
  }



    



  export type ridersSelect = {
    rider?: boolean
    runs?: boolean | FindManyrunsArgs
  }

  export type ridersInclude = {
    runs?: boolean | FindManyrunsArgs
  }

  export type ridersGetPayload<
    S extends boolean | null | undefined | ridersArgs,
    U = keyof S
      > = S extends true
        ? riders
    : S extends undefined
    ? never
    : S extends ridersArgs | FindManyridersArgs
    ?'include' extends U
    ? riders  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'runs'
        ? Array < runsGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof riders ?riders [P]
  : 
          P extends 'runs'
        ? Array < runsGetPayload<S['select'][P]>>  : never
  } 
    : riders
  : riders


  export interface ridersDelegate {
    /**
     * Find zero or one Riders that matches the filter.
     * @param {FindUniqueridersArgs} args - Arguments to find a Riders
     * @example
     * // Get one Riders
     * const riders = await prisma.riders.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueridersArgs>(
      args: Subset<T, FindUniqueridersArgs>
    ): CheckSelect<T, Prisma__ridersClient<riders | null>, Prisma__ridersClient<ridersGetPayload<T> | null>>

    /**
     * Find the first Riders that matches the filter.
     * @param {FindFirstridersArgs} args - Arguments to find a Riders
     * @example
     * // Get one Riders
     * const riders = await prisma.riders.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstridersArgs>(
      args?: Subset<T, FindFirstridersArgs>
    ): CheckSelect<T, Prisma__ridersClient<riders | null>, Prisma__ridersClient<ridersGetPayload<T> | null>>

    /**
     * Find zero or more Riders that matches the filter.
     * @param {FindManyridersArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Riders
     * const riders = await prisma.riders.findMany()
     * 
     * // Get first 10 Riders
     * const riders = await prisma.riders.findMany({ take: 10 })
     * 
     * // Only select the `rider`
     * const ridersWithRiderOnly = await prisma.riders.findMany({ select: { rider: true } })
     * 
    **/
    findMany<T extends FindManyridersArgs>(
      args?: Subset<T, FindManyridersArgs>
    ): CheckSelect<T, Promise<Array<riders>>, Promise<Array<ridersGetPayload<T>>>>

    /**
     * Create a Riders.
     * @param {ridersCreateArgs} args - Arguments to create a Riders.
     * @example
     * // Create one Riders
     * const Riders = await prisma.riders.create({
     *   data: {
     *     // ... data to create a Riders
     *   }
     * })
     * 
    **/
    create<T extends ridersCreateArgs>(
      args: Subset<T, ridersCreateArgs>
    ): CheckSelect<T, Prisma__ridersClient<riders>, Prisma__ridersClient<ridersGetPayload<T>>>

    /**
     * Delete a Riders.
     * @param {ridersDeleteArgs} args - Arguments to delete one Riders.
     * @example
     * // Delete one Riders
     * const Riders = await prisma.riders.delete({
     *   where: {
     *     // ... filter to delete one Riders
     *   }
     * })
     * 
    **/
    delete<T extends ridersDeleteArgs>(
      args: Subset<T, ridersDeleteArgs>
    ): CheckSelect<T, Prisma__ridersClient<riders>, Prisma__ridersClient<ridersGetPayload<T>>>

    /**
     * Update one Riders.
     * @param {ridersUpdateArgs} args - Arguments to update one Riders.
     * @example
     * // Update one Riders
     * const riders = await prisma.riders.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ridersUpdateArgs>(
      args: Subset<T, ridersUpdateArgs>
    ): CheckSelect<T, Prisma__ridersClient<riders>, Prisma__ridersClient<ridersGetPayload<T>>>

    /**
     * Delete zero or more Riders.
     * @param {ridersDeleteManyArgs} args - Arguments to filter Riders to delete.
     * @example
     * // Delete a few Riders
     * const { count } = await prisma.riders.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ridersDeleteManyArgs>(
      args?: Subset<T, ridersDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Riders.
     * @param {ridersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Riders
     * const riders = await prisma.riders.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ridersUpdateManyArgs>(
      args: Subset<T, ridersUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Riders.
     * @param {ridersUpsertArgs} args - Arguments to update or create a Riders.
     * @example
     * // Update or create a Riders
     * const riders = await prisma.riders.upsert({
     *   create: {
     *     // ... data to create a Riders
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Riders we want to update
     *   }
     * })
    **/
    upsert<T extends ridersUpsertArgs>(
      args: Subset<T, ridersUpsertArgs>
    ): CheckSelect<T, Prisma__ridersClient<riders>, Prisma__ridersClient<ridersGetPayload<T>>>

    /**
     * Find zero or one Riders that matches the filter.
     * @param {FindUniqueridersArgs} args - Arguments to find a Riders
     * @deprecated This will be deprecated please use prisma.riders.findUnique
     * @example
     * // Get one Riders
     * const riders = await prisma.riders.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueridersArgs>(
      args: Subset<T, FindUniqueridersArgs>
    ): CheckSelect<T, Prisma__ridersClient<riders | null>, Prisma__ridersClient<ridersGetPayload<T> | null>>

    /**
     * Count the number of Riders.
     * @param {FindManyridersArgs} args - Arguments to filter Riders to count.
     * @example
     * // Count the number of Riders
     * const count = await prisma.riders.count({
     *   where: {
     *     // ... the filter for the Riders we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManyridersArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a Riders.
     * @param {AggregateRidersArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateRidersArgs>(args: Subset<T, AggregateRidersArgs>): Promise<GetRidersAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for riders.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ridersClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    runs<T extends FindManyrunsArgs = {}>(args?: Subset<T, FindManyrunsArgs>): CheckSelect<T, Promise<Array<runs>>, Promise<Array<runsGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * riders findUnique
   */
  export type FindUniqueridersArgs = {
    /**
     * Select specific fields to fetch from the riders
    **/
    select?: ridersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ridersInclude | null
    /**
     * Filter, which riders to fetch.
    **/
    where: ridersWhereUniqueInput
  }


  /**
   * riders findFirst
   */
  export type FindFirstridersArgs = {
    /**
     * Select specific fields to fetch from the riders
    **/
    select?: ridersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ridersInclude | null
    /**
     * Filter, which riders to fetch.
    **/
    where?: ridersWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of riders to fetch.
    **/
    orderBy?: Enumerable<ridersOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for riders.
    **/
    cursor?: ridersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` riders from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` riders.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of riders.
    **/
    distinct?: Enumerable<RidersScalarFieldEnum>
  }


  /**
   * riders findMany
   */
  export type FindManyridersArgs = {
    /**
     * Select specific fields to fetch from the riders
    **/
    select?: ridersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ridersInclude | null
    /**
     * Filter, which riders to fetch.
    **/
    where?: ridersWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of riders to fetch.
    **/
    orderBy?: Enumerable<ridersOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing riders.
    **/
    cursor?: ridersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` riders from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` riders.
    **/
    skip?: number
    distinct?: Enumerable<RidersScalarFieldEnum>
  }


  /**
   * riders create
   */
  export type ridersCreateArgs = {
    /**
     * Select specific fields to fetch from the riders
    **/
    select?: ridersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ridersInclude | null
    /**
     * The data needed to create a riders.
    **/
    data: ridersCreateInput
  }


  /**
   * riders update
   */
  export type ridersUpdateArgs = {
    /**
     * Select specific fields to fetch from the riders
    **/
    select?: ridersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ridersInclude | null
    /**
     * The data needed to update a riders.
    **/
    data: ridersUpdateInput
    /**
     * Choose, which riders to update.
    **/
    where: ridersWhereUniqueInput
  }


  /**
   * riders updateMany
   */
  export type ridersUpdateManyArgs = {
    data: ridersUpdateManyMutationInput
    where?: ridersWhereInput
  }


  /**
   * riders upsert
   */
  export type ridersUpsertArgs = {
    /**
     * Select specific fields to fetch from the riders
    **/
    select?: ridersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ridersInclude | null
    /**
     * The filter to search for the riders to update in case it exists.
    **/
    where: ridersWhereUniqueInput
    /**
     * In case the riders found by the `where` argument doesn't exist, create a new riders with this data.
    **/
    create: ridersCreateInput
    /**
     * In case the riders was found with the provided `where` argument, update it with this data.
    **/
    update: ridersUpdateInput
  }


  /**
   * riders delete
   */
  export type ridersDeleteArgs = {
    /**
     * Select specific fields to fetch from the riders
    **/
    select?: ridersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ridersInclude | null
    /**
     * Filter which riders to delete.
    **/
    where: ridersWhereUniqueInput
  }


  /**
   * riders deleteMany
   */
  export type ridersDeleteManyArgs = {
    where?: ridersWhereInput
  }


  /**
   * riders without action
   */
  export type ridersArgs = {
    /**
     * Select specific fields to fetch from the riders
    **/
    select?: ridersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ridersInclude | null
  }



  /**
   * Model profiles
   */


  export type AggregateProfiles = {
    count: number | null
    min: ProfilesMinAggregateOutputType | null
    max: ProfilesMaxAggregateOutputType | null
  }

  export type ProfilesMinAggregateOutputType = {
    email: string | null
    id: string | null
    create_date: Date | null
    country: string | null
    state: string | null
    gamertag: string | null
    aliases: string | null
    username: string | null
  }

  export type ProfilesMaxAggregateOutputType = {
    email: string | null
    id: string | null
    create_date: Date | null
    country: string | null
    state: string | null
    gamertag: string | null
    aliases: string | null
    username: string | null
  }

  export type ProfilesCountAggregateOutputType = {
    email: number | null
    id: number | null
    create_date: number | null
    country: number | null
    state: number | null
    gamertag: number | null
    aliases: number | null
    username: number | null
    _all: number
  }


  export type ProfilesMinAggregateInputType = {
    email?: true
    id?: true
    create_date?: true
    country?: true
    state?: true
    gamertag?: true
    aliases?: true
    username?: true
  }

  export type ProfilesMaxAggregateInputType = {
    email?: true
    id?: true
    create_date?: true
    country?: true
    state?: true
    gamertag?: true
    aliases?: true
    username?: true
  }

  export type ProfilesCountAggregateInputType = {
    email?: true
    id?: true
    create_date?: true
    country?: true
    state?: true
    gamertag?: true
    aliases?: true
    username?: true
    _all?: true
  }

  export type AggregateProfilesArgs = {
    /**
     * Filter which profiles to aggregate.
    **/
    where?: profilesWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of profiles to fetch.
    **/
    orderBy?: Enumerable<profilesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: profilesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` profiles from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` profiles.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned profiles
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: ProfilesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: ProfilesMaxAggregateInputType
  }

  export type GetProfilesAggregateType<T extends AggregateProfilesArgs> = {
    [P in keyof T]: P extends 'count' ? number : never
  }



    



  export type profilesSelect = {
    email?: boolean
    id?: boolean
    create_date?: boolean
    country?: boolean
    state?: boolean
    gamertag?: boolean
    aliases?: boolean
    username?: boolean
  }

  export type profilesGetPayload<
    S extends boolean | null | undefined | profilesArgs,
    U = keyof S
      > = S extends true
        ? profiles
    : S extends undefined
    ? never
    : S extends profilesArgs | FindManyprofilesArgs
    ?'include' extends U
    ? profiles 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof profiles ?profiles [P]
  : 
     never
  } 
    : profiles
  : profiles


  export interface profilesDelegate {
    /**
     * Find zero or one Profiles that matches the filter.
     * @param {FindUniqueprofilesArgs} args - Arguments to find a Profiles
     * @example
     * // Get one Profiles
     * const profiles = await prisma.profiles.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueprofilesArgs>(
      args: Subset<T, FindUniqueprofilesArgs>
    ): CheckSelect<T, Prisma__profilesClient<profiles | null>, Prisma__profilesClient<profilesGetPayload<T> | null>>

    /**
     * Find the first Profiles that matches the filter.
     * @param {FindFirstprofilesArgs} args - Arguments to find a Profiles
     * @example
     * // Get one Profiles
     * const profiles = await prisma.profiles.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstprofilesArgs>(
      args?: Subset<T, FindFirstprofilesArgs>
    ): CheckSelect<T, Prisma__profilesClient<profiles | null>, Prisma__profilesClient<profilesGetPayload<T> | null>>

    /**
     * Find zero or more Profiles that matches the filter.
     * @param {FindManyprofilesArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Profiles
     * const profiles = await prisma.profiles.findMany()
     * 
     * // Get first 10 Profiles
     * const profiles = await prisma.profiles.findMany({ take: 10 })
     * 
     * // Only select the `email`
     * const profilesWithEmailOnly = await prisma.profiles.findMany({ select: { email: true } })
     * 
    **/
    findMany<T extends FindManyprofilesArgs>(
      args?: Subset<T, FindManyprofilesArgs>
    ): CheckSelect<T, Promise<Array<profiles>>, Promise<Array<profilesGetPayload<T>>>>

    /**
     * Create a Profiles.
     * @param {profilesCreateArgs} args - Arguments to create a Profiles.
     * @example
     * // Create one Profiles
     * const Profiles = await prisma.profiles.create({
     *   data: {
     *     // ... data to create a Profiles
     *   }
     * })
     * 
    **/
    create<T extends profilesCreateArgs>(
      args: Subset<T, profilesCreateArgs>
    ): CheckSelect<T, Prisma__profilesClient<profiles>, Prisma__profilesClient<profilesGetPayload<T>>>

    /**
     * Delete a Profiles.
     * @param {profilesDeleteArgs} args - Arguments to delete one Profiles.
     * @example
     * // Delete one Profiles
     * const Profiles = await prisma.profiles.delete({
     *   where: {
     *     // ... filter to delete one Profiles
     *   }
     * })
     * 
    **/
    delete<T extends profilesDeleteArgs>(
      args: Subset<T, profilesDeleteArgs>
    ): CheckSelect<T, Prisma__profilesClient<profiles>, Prisma__profilesClient<profilesGetPayload<T>>>

    /**
     * Update one Profiles.
     * @param {profilesUpdateArgs} args - Arguments to update one Profiles.
     * @example
     * // Update one Profiles
     * const profiles = await prisma.profiles.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends profilesUpdateArgs>(
      args: Subset<T, profilesUpdateArgs>
    ): CheckSelect<T, Prisma__profilesClient<profiles>, Prisma__profilesClient<profilesGetPayload<T>>>

    /**
     * Delete zero or more Profiles.
     * @param {profilesDeleteManyArgs} args - Arguments to filter Profiles to delete.
     * @example
     * // Delete a few Profiles
     * const { count } = await prisma.profiles.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends profilesDeleteManyArgs>(
      args?: Subset<T, profilesDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Profiles.
     * @param {profilesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Profiles
     * const profiles = await prisma.profiles.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends profilesUpdateManyArgs>(
      args: Subset<T, profilesUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Profiles.
     * @param {profilesUpsertArgs} args - Arguments to update or create a Profiles.
     * @example
     * // Update or create a Profiles
     * const profiles = await prisma.profiles.upsert({
     *   create: {
     *     // ... data to create a Profiles
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Profiles we want to update
     *   }
     * })
    **/
    upsert<T extends profilesUpsertArgs>(
      args: Subset<T, profilesUpsertArgs>
    ): CheckSelect<T, Prisma__profilesClient<profiles>, Prisma__profilesClient<profilesGetPayload<T>>>

    /**
     * Find zero or one Profiles that matches the filter.
     * @param {FindUniqueprofilesArgs} args - Arguments to find a Profiles
     * @deprecated This will be deprecated please use prisma.profiles.findUnique
     * @example
     * // Get one Profiles
     * const profiles = await prisma.profiles.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueprofilesArgs>(
      args: Subset<T, FindUniqueprofilesArgs>
    ): CheckSelect<T, Prisma__profilesClient<profiles | null>, Prisma__profilesClient<profilesGetPayload<T> | null>>

    /**
     * Count the number of Profiles.
     * @param {FindManyprofilesArgs} args - Arguments to filter Profiles to count.
     * @example
     * // Count the number of Profiles
     * const count = await prisma.profiles.count({
     *   where: {
     *     // ... the filter for the Profiles we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManyprofilesArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a Profiles.
     * @param {AggregateProfilesArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateProfilesArgs>(args: Subset<T, AggregateProfilesArgs>): Promise<GetProfilesAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for profiles.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__profilesClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * profiles findUnique
   */
  export type FindUniqueprofilesArgs = {
    /**
     * Select specific fields to fetch from the profiles
    **/
    select?: profilesSelect | null
    /**
     * Filter, which profiles to fetch.
    **/
    where: profilesWhereUniqueInput
  }


  /**
   * profiles findFirst
   */
  export type FindFirstprofilesArgs = {
    /**
     * Select specific fields to fetch from the profiles
    **/
    select?: profilesSelect | null
    /**
     * Filter, which profiles to fetch.
    **/
    where?: profilesWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of profiles to fetch.
    **/
    orderBy?: Enumerable<profilesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for profiles.
    **/
    cursor?: profilesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` profiles from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` profiles.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of profiles.
    **/
    distinct?: Enumerable<ProfilesScalarFieldEnum>
  }


  /**
   * profiles findMany
   */
  export type FindManyprofilesArgs = {
    /**
     * Select specific fields to fetch from the profiles
    **/
    select?: profilesSelect | null
    /**
     * Filter, which profiles to fetch.
    **/
    where?: profilesWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of profiles to fetch.
    **/
    orderBy?: Enumerable<profilesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing profiles.
    **/
    cursor?: profilesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` profiles from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` profiles.
    **/
    skip?: number
    distinct?: Enumerable<ProfilesScalarFieldEnum>
  }


  /**
   * profiles create
   */
  export type profilesCreateArgs = {
    /**
     * Select specific fields to fetch from the profiles
    **/
    select?: profilesSelect | null
    /**
     * The data needed to create a profiles.
    **/
    data: profilesCreateInput
  }


  /**
   * profiles update
   */
  export type profilesUpdateArgs = {
    /**
     * Select specific fields to fetch from the profiles
    **/
    select?: profilesSelect | null
    /**
     * The data needed to update a profiles.
    **/
    data: profilesUpdateInput
    /**
     * Choose, which profiles to update.
    **/
    where: profilesWhereUniqueInput
  }


  /**
   * profiles updateMany
   */
  export type profilesUpdateManyArgs = {
    data: profilesUpdateManyMutationInput
    where?: profilesWhereInput
  }


  /**
   * profiles upsert
   */
  export type profilesUpsertArgs = {
    /**
     * Select specific fields to fetch from the profiles
    **/
    select?: profilesSelect | null
    /**
     * The filter to search for the profiles to update in case it exists.
    **/
    where: profilesWhereUniqueInput
    /**
     * In case the profiles found by the `where` argument doesn't exist, create a new profiles with this data.
    **/
    create: profilesCreateInput
    /**
     * In case the profiles was found with the provided `where` argument, update it with this data.
    **/
    update: profilesUpdateInput
  }


  /**
   * profiles delete
   */
  export type profilesDeleteArgs = {
    /**
     * Select specific fields to fetch from the profiles
    **/
    select?: profilesSelect | null
    /**
     * Filter which profiles to delete.
    **/
    where: profilesWhereUniqueInput
  }


  /**
   * profiles deleteMany
   */
  export type profilesDeleteManyArgs = {
    where?: profilesWhereInput
  }


  /**
   * profiles without action
   */
  export type profilesArgs = {
    /**
     * Select specific fields to fetch from the profiles
    **/
    select?: profilesSelect | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const RunsScalarFieldEnum: {
    rider: 'rider',
    rank: 'rank',
    faults: 'faults',
    time: 'time',
    trackName: 'trackName',
    ninjaPoints: 'ninjaPoints',
    ninjaLevel: 'ninjaLevel',
    length: 'length',
    faultSponginess: 'faultSponginess',
    rating: 'rating'
  };

  export type RunsScalarFieldEnum = (typeof RunsScalarFieldEnum)[keyof typeof RunsScalarFieldEnum]


  export const TracksScalarFieldEnum: {
    track_name: 'track_name',
    id: 'id',
    creator: 'creator',
    ninja_level: 'ninja_level',
    length: 'length',
    average_faults: 'average_faults',
    fault_sponginess: 'fault_sponginess'
  };

  export type TracksScalarFieldEnum = (typeof TracksScalarFieldEnum)[keyof typeof TracksScalarFieldEnum]


  export const RidersScalarFieldEnum: {
    rider: 'rider'
  };

  export type RidersScalarFieldEnum = (typeof RidersScalarFieldEnum)[keyof typeof RidersScalarFieldEnum]


  export const ProfilesScalarFieldEnum: {
    email: 'email',
    id: 'id',
    create_date: 'create_date',
    country: 'country',
    state: 'state',
    gamertag: 'gamertag',
    aliases: 'aliases',
    username: 'username'
  };

  export type ProfilesScalarFieldEnum = (typeof ProfilesScalarFieldEnum)[keyof typeof ProfilesScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type runsWhereInput = {
    AND?: Enumerable<runsWhereInput>
    OR?: Enumerable<runsWhereInput>
    NOT?: Enumerable<runsWhereInput>
    rider?: StringFilter | string
    rank?: IntNullableFilter | number | null
    faults?: IntFilter | number
    time?: StringFilter | string
    trackName?: StringFilter | string
    ninjaPoints?: FloatNullableFilter | number | null
    ninjaLevel?: FloatFilter | number
    length?: Enumruns_lengthFilter | runs_length
    faultSponginess?: Enumruns_fault_sponginessFilter | runs_fault_sponginess
    rating?: FloatNullableFilter | number | null
    riders?: XOR<ridersWhereInput, RidersRelationFilter>
  }

  export type runsOrderByInput = {
    rider?: SortOrder
    rank?: SortOrder
    faults?: SortOrder
    time?: SortOrder
    trackName?: SortOrder
    ninjaPoints?: SortOrder
    ninjaLevel?: SortOrder
    length?: SortOrder
    faultSponginess?: SortOrder
    rating?: SortOrder
  }

  export type runsWhereUniqueInput = {
    rider_trackName?: runsRiderTrackNameCompoundUniqueInput
  }

  export type tracksWhereInput = {
    AND?: Enumerable<tracksWhereInput>
    OR?: Enumerable<tracksWhereInput>
    NOT?: Enumerable<tracksWhereInput>
    track_name?: StringFilter | string
    id?: IntFilter | number
    creator?: StringFilter | string
    ninja_level?: StringNullableFilter | string | null
    length?: Enumtracks_lengthNullableFilter | tracks_length | null
    average_faults?: IntNullableFilter | number | null
    fault_sponginess?: Enumtracks_fault_sponginessNullableFilter | tracks_fault_sponginess | null
  }

  export type tracksOrderByInput = {
    track_name?: SortOrder
    id?: SortOrder
    creator?: SortOrder
    ninja_level?: SortOrder
    length?: SortOrder
    average_faults?: SortOrder
    fault_sponginess?: SortOrder
  }

  export type tracksWhereUniqueInput = {
    id?: number
  }

  export type ridersWhereInput = {
    AND?: Enumerable<ridersWhereInput>
    OR?: Enumerable<ridersWhereInput>
    NOT?: Enumerable<ridersWhereInput>
    rider?: StringFilter | string
    runs?: RunsListRelationFilter
  }

  export type ridersOrderByInput = {
    rider?: SortOrder
  }

  export type ridersWhereUniqueInput = {
    rider?: string
  }

  export type profilesWhereInput = {
    AND?: Enumerable<profilesWhereInput>
    OR?: Enumerable<profilesWhereInput>
    NOT?: Enumerable<profilesWhereInput>
    email?: StringFilter | string
    id?: StringFilter | string
    create_date?: DateTimeFilter | Date | string
    country?: StringNullableFilter | string | null
    state?: StringNullableFilter | string | null
    gamertag?: StringNullableFilter | string | null
    aliases?: StringNullableFilter | string | null
    username?: StringFilter | string
  }

  export type profilesOrderByInput = {
    email?: SortOrder
    id?: SortOrder
    create_date?: SortOrder
    country?: SortOrder
    state?: SortOrder
    gamertag?: SortOrder
    aliases?: SortOrder
    username?: SortOrder
  }

  export type profilesWhereUniqueInput = {
    id?: string
  }

  export type runsCreateInput = {
    rank?: number | null
    faults: number
    time: string
    trackName: string
    ninjaPoints?: number | null
    ninjaLevel: number
    length: runs_length
    faultSponginess: runs_fault_sponginess
    rating?: number | null
    riders: ridersCreateOneWithoutRunsInput
  }

  export type runsUpdateInput = {
    rank?: NullableIntFieldUpdateOperationsInput | number | null
    faults?: IntFieldUpdateOperationsInput | number
    time?: StringFieldUpdateOperationsInput | string
    trackName?: StringFieldUpdateOperationsInput | string
    ninjaPoints?: NullableFloatFieldUpdateOperationsInput | number | null
    ninjaLevel?: FloatFieldUpdateOperationsInput | number
    length?: Enumruns_lengthFieldUpdateOperationsInput | runs_length
    faultSponginess?: Enumruns_fault_sponginessFieldUpdateOperationsInput | runs_fault_sponginess
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    riders?: ridersUpdateOneRequiredWithoutRunsInput
  }

  export type runsUpdateManyMutationInput = {
    rank?: NullableIntFieldUpdateOperationsInput | number | null
    faults?: IntFieldUpdateOperationsInput | number
    time?: StringFieldUpdateOperationsInput | string
    trackName?: StringFieldUpdateOperationsInput | string
    ninjaPoints?: NullableFloatFieldUpdateOperationsInput | number | null
    ninjaLevel?: FloatFieldUpdateOperationsInput | number
    length?: Enumruns_lengthFieldUpdateOperationsInput | runs_length
    faultSponginess?: Enumruns_fault_sponginessFieldUpdateOperationsInput | runs_fault_sponginess
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type tracksCreateInput = {
    track_name: string
    creator: string
    ninja_level?: string | null
    length?: tracks_length | null
    average_faults?: number | null
    fault_sponginess?: tracks_fault_sponginess | null
  }

  export type tracksUpdateInput = {
    track_name?: StringFieldUpdateOperationsInput | string
    creator?: StringFieldUpdateOperationsInput | string
    ninja_level?: NullableStringFieldUpdateOperationsInput | string | null
    length?: NullableEnumtracks_lengthFieldUpdateOperationsInput | tracks_length | null
    average_faults?: NullableIntFieldUpdateOperationsInput | number | null
    fault_sponginess?: NullableEnumtracks_fault_sponginessFieldUpdateOperationsInput | tracks_fault_sponginess | null
  }

  export type tracksUpdateManyMutationInput = {
    track_name?: StringFieldUpdateOperationsInput | string
    creator?: StringFieldUpdateOperationsInput | string
    ninja_level?: NullableStringFieldUpdateOperationsInput | string | null
    length?: NullableEnumtracks_lengthFieldUpdateOperationsInput | tracks_length | null
    average_faults?: NullableIntFieldUpdateOperationsInput | number | null
    fault_sponginess?: NullableEnumtracks_fault_sponginessFieldUpdateOperationsInput | tracks_fault_sponginess | null
  }

  export type ridersCreateInput = {
    rider: string
    runs?: runsCreateManyWithoutRidersInput
  }

  export type ridersUpdateInput = {
    rider?: StringFieldUpdateOperationsInput | string
    runs?: runsUpdateManyWithoutRidersInput
  }

  export type ridersUpdateManyMutationInput = {
    rider?: StringFieldUpdateOperationsInput | string
  }

  export type profilesCreateInput = {
    email: string
    id: string
    create_date?: Date | string
    country?: string | null
    state?: string | null
    gamertag?: string | null
    aliases?: string | null
    username: string
  }

  export type profilesUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    create_date?: DateTimeFieldUpdateOperationsInput | Date | string
    country?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    gamertag?: NullableStringFieldUpdateOperationsInput | string | null
    aliases?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
  }

  export type profilesUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    create_date?: DateTimeFieldUpdateOperationsInput | Date | string
    country?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    gamertag?: NullableStringFieldUpdateOperationsInput | string | null
    aliases?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type FloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type Enumruns_lengthFilter = {
    equals?: runs_length
    in?: Enumerable<runs_length>
    notIn?: Enumerable<runs_length>
    not?: NestedEnumruns_lengthFilter | runs_length
  }

  export type Enumruns_fault_sponginessFilter = {
    equals?: runs_fault_sponginess
    in?: Enumerable<runs_fault_sponginess>
    notIn?: Enumerable<runs_fault_sponginess>
    not?: NestedEnumruns_fault_sponginessFilter | runs_fault_sponginess
  }

  export type RidersRelationFilter = {
    is?: ridersWhereInput
    isNot?: ridersWhereInput
  }

  export type runsRiderTrackNameCompoundUniqueInput = {
    rider: string
    trackName: string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type Enumtracks_lengthNullableFilter = {
    equals?: tracks_length | null
    in?: Enumerable<tracks_length> | null
    notIn?: Enumerable<tracks_length> | null
    not?: NestedEnumtracks_lengthNullableFilter | tracks_length | null
  }

  export type Enumtracks_fault_sponginessNullableFilter = {
    equals?: tracks_fault_sponginess | null
    in?: Enumerable<tracks_fault_sponginess> | null
    notIn?: Enumerable<tracks_fault_sponginess> | null
    not?: NestedEnumtracks_fault_sponginessNullableFilter | tracks_fault_sponginess | null
  }

  export type RunsListRelationFilter = {
    every?: runsWhereInput
    some?: runsWhereInput
    none?: runsWhereInput
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type ridersCreateOneWithoutRunsInput = {
    create?: ridersCreateWithoutRunsInput
    connect?: ridersWhereUniqueInput
    connectOrCreate?: ridersCreateOrConnectWithoutrunsInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type Enumruns_lengthFieldUpdateOperationsInput = {
    set?: runs_length
  }

  export type Enumruns_fault_sponginessFieldUpdateOperationsInput = {
    set?: runs_fault_sponginess
  }

  export type ridersUpdateOneRequiredWithoutRunsInput = {
    create?: ridersCreateWithoutRunsInput
    connect?: ridersWhereUniqueInput
    update?: ridersUpdateWithoutRunsInput
    upsert?: ridersUpsertWithoutRunsInput
    connectOrCreate?: ridersCreateOrConnectWithoutrunsInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableEnumtracks_lengthFieldUpdateOperationsInput = {
    set?: tracks_length | null
  }

  export type NullableEnumtracks_fault_sponginessFieldUpdateOperationsInput = {
    set?: tracks_fault_sponginess | null
  }

  export type runsCreateManyWithoutRidersInput = {
    create?: Enumerable<runsCreateWithoutRidersInput>
    connect?: Enumerable<runsWhereUniqueInput>
    connectOrCreate?: Enumerable<runsCreateOrConnectWithoutridersInput>
  }

  export type runsUpdateManyWithoutRidersInput = {
    create?: Enumerable<runsCreateWithoutRidersInput>
    connect?: Enumerable<runsWhereUniqueInput>
    set?: Enumerable<runsWhereUniqueInput>
    disconnect?: Enumerable<runsWhereUniqueInput>
    delete?: Enumerable<runsWhereUniqueInput>
    update?: Enumerable<runsUpdateWithWhereUniqueWithoutRidersInput>
    updateMany?: Enumerable<runsUpdateManyWithWhereWithoutRidersInput>
    deleteMany?: Enumerable<runsScalarWhereInput>
    upsert?: Enumerable<runsUpsertWithWhereUniqueWithoutRidersInput>
    connectOrCreate?: Enumerable<runsCreateOrConnectWithoutridersInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedEnumruns_lengthFilter = {
    equals?: runs_length
    in?: Enumerable<runs_length>
    notIn?: Enumerable<runs_length>
    not?: NestedEnumruns_lengthFilter | runs_length
  }

  export type NestedEnumruns_fault_sponginessFilter = {
    equals?: runs_fault_sponginess
    in?: Enumerable<runs_fault_sponginess>
    notIn?: Enumerable<runs_fault_sponginess>
    not?: NestedEnumruns_fault_sponginessFilter | runs_fault_sponginess
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedEnumtracks_lengthNullableFilter = {
    equals?: tracks_length | null
    in?: Enumerable<tracks_length> | null
    notIn?: Enumerable<tracks_length> | null
    not?: NestedEnumtracks_lengthNullableFilter | tracks_length | null
  }

  export type NestedEnumtracks_fault_sponginessNullableFilter = {
    equals?: tracks_fault_sponginess | null
    in?: Enumerable<tracks_fault_sponginess> | null
    notIn?: Enumerable<tracks_fault_sponginess> | null
    not?: NestedEnumtracks_fault_sponginessNullableFilter | tracks_fault_sponginess | null
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type ridersCreateWithoutRunsInput = {
    rider: string
  }

  export type ridersCreateOrConnectWithoutrunsInput = {
    where: ridersWhereUniqueInput
    create: ridersCreateWithoutRunsInput
  }

  export type ridersUpdateWithoutRunsInput = {
    rider?: StringFieldUpdateOperationsInput | string
  }

  export type ridersUpsertWithoutRunsInput = {
    update: ridersUpdateWithoutRunsInput
    create: ridersCreateWithoutRunsInput
  }

  export type runsCreateWithoutRidersInput = {
    rank?: number | null
    faults: number
    time: string
    trackName: string
    ninjaPoints?: number | null
    ninjaLevel: number
    length: runs_length
    faultSponginess: runs_fault_sponginess
    rating?: number | null
  }

  export type runsCreateOrConnectWithoutridersInput = {
    where: runsWhereUniqueInput
    create: runsCreateWithoutRidersInput
  }

  export type runsUpdateWithWhereUniqueWithoutRidersInput = {
    where: runsWhereUniqueInput
    data: runsUpdateWithoutRidersInput
  }

  export type runsUpdateManyWithWhereWithoutRidersInput = {
    where: runsScalarWhereInput
    data: runsUpdateManyMutationInput
  }

  export type runsScalarWhereInput = {
    AND?: Enumerable<runsScalarWhereInput>
    OR?: Enumerable<runsScalarWhereInput>
    NOT?: Enumerable<runsScalarWhereInput>
    rider?: StringFilter | string
    rank?: IntNullableFilter | number | null
    faults?: IntFilter | number
    time?: StringFilter | string
    trackName?: StringFilter | string
    ninjaPoints?: FloatNullableFilter | number | null
    ninjaLevel?: FloatFilter | number
    length?: Enumruns_lengthFilter | runs_length
    faultSponginess?: Enumruns_fault_sponginessFilter | runs_fault_sponginess
    rating?: FloatNullableFilter | number | null
  }

  export type runsUpsertWithWhereUniqueWithoutRidersInput = {
    where: runsWhereUniqueInput
    update: runsUpdateWithoutRidersInput
    create: runsCreateWithoutRidersInput
  }

  export type runsUpdateWithoutRidersInput = {
    rank?: NullableIntFieldUpdateOperationsInput | number | null
    faults?: IntFieldUpdateOperationsInput | number
    time?: StringFieldUpdateOperationsInput | string
    trackName?: StringFieldUpdateOperationsInput | string
    ninjaPoints?: NullableFloatFieldUpdateOperationsInput | number | null
    ninjaLevel?: FloatFieldUpdateOperationsInput | number
    length?: Enumruns_lengthFieldUpdateOperationsInput | runs_length
    faultSponginess?: Enumruns_fault_sponginessFieldUpdateOperationsInput | runs_fault_sponginess
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
  }



  /**
   * Batch Payload for updateMany & deleteMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}

/*
* Exports for compatibility introduced in 2.12.0
* Please import from the Prisma namespace instead
*/

/**
 * @deprecated Renamed to `Prisma.RunsScalarFieldEnum`
 */
export type RunsScalarFieldEnum = Prisma.RunsScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.TracksScalarFieldEnum`
 */
export type TracksScalarFieldEnum = Prisma.TracksScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.RidersScalarFieldEnum`
 */
export type RidersScalarFieldEnum = Prisma.RidersScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.ProfilesScalarFieldEnum`
 */
export type ProfilesScalarFieldEnum = Prisma.ProfilesScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.SortOrder`
 */
export type SortOrder = Prisma.SortOrder

/**
 * @deprecated Renamed to `Prisma.ModelName`
 */
export type ModelName = Prisma.ModelName

/**
 * @deprecated Renamed to `Prisma.AggregateRuns`
 */
export type AggregateRuns = Prisma.AggregateRuns

/**
 * @deprecated Renamed to `Prisma.RunsAvgAggregateOutputType`
 */
export type RunsAvgAggregateOutputType = Prisma.RunsAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.RunsSumAggregateOutputType`
 */
export type RunsSumAggregateOutputType = Prisma.RunsSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.RunsMinAggregateOutputType`
 */
export type RunsMinAggregateOutputType = Prisma.RunsMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.RunsMaxAggregateOutputType`
 */
export type RunsMaxAggregateOutputType = Prisma.RunsMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.RunsCountAggregateOutputType`
 */
export type RunsCountAggregateOutputType = Prisma.RunsCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateRunsArgs`
 */
export type AggregateRunsArgs = Prisma.AggregateRunsArgs

/**
 * @deprecated Renamed to `Prisma.RunsAvgAggregateInputType`
 */
export type RunsAvgAggregateInputType = Prisma.RunsAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.RunsSumAggregateInputType`
 */
export type RunsSumAggregateInputType = Prisma.RunsSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.RunsMinAggregateInputType`
 */
export type RunsMinAggregateInputType = Prisma.RunsMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.RunsMaxAggregateInputType`
 */
export type RunsMaxAggregateInputType = Prisma.RunsMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.RunsCountAggregateInputType`
 */
export type RunsCountAggregateInputType = Prisma.RunsCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.runsSelect`
 */
export type runsSelect = Prisma.runsSelect

/**
 * @deprecated Renamed to `Prisma.runsInclude`
 */
export type runsInclude = Prisma.runsInclude

/**
 * @deprecated Renamed to `Prisma.FindUniquerunsArgs`
 */
export type FindUniquerunsArgs = Prisma.FindUniquerunsArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstrunsArgs`
 */
export type FindFirstrunsArgs = Prisma.FindFirstrunsArgs

/**
 * @deprecated Renamed to `Prisma.FindManyrunsArgs`
 */
export type FindManyrunsArgs = Prisma.FindManyrunsArgs

/**
 * @deprecated Renamed to `Prisma.runsCreateArgs`
 */
export type runsCreateArgs = Prisma.runsCreateArgs

/**
 * @deprecated Renamed to `Prisma.runsUpdateArgs`
 */
export type runsUpdateArgs = Prisma.runsUpdateArgs

/**
 * @deprecated Renamed to `Prisma.runsUpdateManyArgs`
 */
export type runsUpdateManyArgs = Prisma.runsUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.runsUpsertArgs`
 */
export type runsUpsertArgs = Prisma.runsUpsertArgs

/**
 * @deprecated Renamed to `Prisma.runsDeleteArgs`
 */
export type runsDeleteArgs = Prisma.runsDeleteArgs

/**
 * @deprecated Renamed to `Prisma.runsDeleteManyArgs`
 */
export type runsDeleteManyArgs = Prisma.runsDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateTracks`
 */
export type AggregateTracks = Prisma.AggregateTracks

/**
 * @deprecated Renamed to `Prisma.TracksAvgAggregateOutputType`
 */
export type TracksAvgAggregateOutputType = Prisma.TracksAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.TracksSumAggregateOutputType`
 */
export type TracksSumAggregateOutputType = Prisma.TracksSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.TracksMinAggregateOutputType`
 */
export type TracksMinAggregateOutputType = Prisma.TracksMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.TracksMaxAggregateOutputType`
 */
export type TracksMaxAggregateOutputType = Prisma.TracksMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.TracksCountAggregateOutputType`
 */
export type TracksCountAggregateOutputType = Prisma.TracksCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateTracksArgs`
 */
export type AggregateTracksArgs = Prisma.AggregateTracksArgs

/**
 * @deprecated Renamed to `Prisma.TracksAvgAggregateInputType`
 */
export type TracksAvgAggregateInputType = Prisma.TracksAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.TracksSumAggregateInputType`
 */
export type TracksSumAggregateInputType = Prisma.TracksSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.TracksMinAggregateInputType`
 */
export type TracksMinAggregateInputType = Prisma.TracksMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.TracksMaxAggregateInputType`
 */
export type TracksMaxAggregateInputType = Prisma.TracksMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.TracksCountAggregateInputType`
 */
export type TracksCountAggregateInputType = Prisma.TracksCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.tracksSelect`
 */
export type tracksSelect = Prisma.tracksSelect

/**
 * @deprecated Renamed to `Prisma.FindUniquetracksArgs`
 */
export type FindUniquetracksArgs = Prisma.FindUniquetracksArgs

/**
 * @deprecated Renamed to `Prisma.FindFirsttracksArgs`
 */
export type FindFirsttracksArgs = Prisma.FindFirsttracksArgs

/**
 * @deprecated Renamed to `Prisma.FindManytracksArgs`
 */
export type FindManytracksArgs = Prisma.FindManytracksArgs

/**
 * @deprecated Renamed to `Prisma.tracksCreateArgs`
 */
export type tracksCreateArgs = Prisma.tracksCreateArgs

/**
 * @deprecated Renamed to `Prisma.tracksUpdateArgs`
 */
export type tracksUpdateArgs = Prisma.tracksUpdateArgs

/**
 * @deprecated Renamed to `Prisma.tracksUpdateManyArgs`
 */
export type tracksUpdateManyArgs = Prisma.tracksUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.tracksUpsertArgs`
 */
export type tracksUpsertArgs = Prisma.tracksUpsertArgs

/**
 * @deprecated Renamed to `Prisma.tracksDeleteArgs`
 */
export type tracksDeleteArgs = Prisma.tracksDeleteArgs

/**
 * @deprecated Renamed to `Prisma.tracksDeleteManyArgs`
 */
export type tracksDeleteManyArgs = Prisma.tracksDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateRiders`
 */
export type AggregateRiders = Prisma.AggregateRiders

/**
 * @deprecated Renamed to `Prisma.RidersMinAggregateOutputType`
 */
export type RidersMinAggregateOutputType = Prisma.RidersMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.RidersMaxAggregateOutputType`
 */
export type RidersMaxAggregateOutputType = Prisma.RidersMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.RidersCountAggregateOutputType`
 */
export type RidersCountAggregateOutputType = Prisma.RidersCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateRidersArgs`
 */
export type AggregateRidersArgs = Prisma.AggregateRidersArgs

/**
 * @deprecated Renamed to `Prisma.RidersMinAggregateInputType`
 */
export type RidersMinAggregateInputType = Prisma.RidersMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.RidersMaxAggregateInputType`
 */
export type RidersMaxAggregateInputType = Prisma.RidersMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.RidersCountAggregateInputType`
 */
export type RidersCountAggregateInputType = Prisma.RidersCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ridersSelect`
 */
export type ridersSelect = Prisma.ridersSelect

/**
 * @deprecated Renamed to `Prisma.ridersInclude`
 */
export type ridersInclude = Prisma.ridersInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueridersArgs`
 */
export type FindUniqueridersArgs = Prisma.FindUniqueridersArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstridersArgs`
 */
export type FindFirstridersArgs = Prisma.FindFirstridersArgs

/**
 * @deprecated Renamed to `Prisma.FindManyridersArgs`
 */
export type FindManyridersArgs = Prisma.FindManyridersArgs

/**
 * @deprecated Renamed to `Prisma.ridersCreateArgs`
 */
export type ridersCreateArgs = Prisma.ridersCreateArgs

/**
 * @deprecated Renamed to `Prisma.ridersUpdateArgs`
 */
export type ridersUpdateArgs = Prisma.ridersUpdateArgs

/**
 * @deprecated Renamed to `Prisma.ridersUpdateManyArgs`
 */
export type ridersUpdateManyArgs = Prisma.ridersUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.ridersUpsertArgs`
 */
export type ridersUpsertArgs = Prisma.ridersUpsertArgs

/**
 * @deprecated Renamed to `Prisma.ridersDeleteArgs`
 */
export type ridersDeleteArgs = Prisma.ridersDeleteArgs

/**
 * @deprecated Renamed to `Prisma.ridersDeleteManyArgs`
 */
export type ridersDeleteManyArgs = Prisma.ridersDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateProfiles`
 */
export type AggregateProfiles = Prisma.AggregateProfiles

/**
 * @deprecated Renamed to `Prisma.ProfilesMinAggregateOutputType`
 */
export type ProfilesMinAggregateOutputType = Prisma.ProfilesMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.ProfilesMaxAggregateOutputType`
 */
export type ProfilesMaxAggregateOutputType = Prisma.ProfilesMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.ProfilesCountAggregateOutputType`
 */
export type ProfilesCountAggregateOutputType = Prisma.ProfilesCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateProfilesArgs`
 */
export type AggregateProfilesArgs = Prisma.AggregateProfilesArgs

/**
 * @deprecated Renamed to `Prisma.ProfilesMinAggregateInputType`
 */
export type ProfilesMinAggregateInputType = Prisma.ProfilesMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ProfilesMaxAggregateInputType`
 */
export type ProfilesMaxAggregateInputType = Prisma.ProfilesMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ProfilesCountAggregateInputType`
 */
export type ProfilesCountAggregateInputType = Prisma.ProfilesCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.profilesSelect`
 */
export type profilesSelect = Prisma.profilesSelect

/**
 * @deprecated Renamed to `Prisma.FindUniqueprofilesArgs`
 */
export type FindUniqueprofilesArgs = Prisma.FindUniqueprofilesArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstprofilesArgs`
 */
export type FindFirstprofilesArgs = Prisma.FindFirstprofilesArgs

/**
 * @deprecated Renamed to `Prisma.FindManyprofilesArgs`
 */
export type FindManyprofilesArgs = Prisma.FindManyprofilesArgs

/**
 * @deprecated Renamed to `Prisma.profilesCreateArgs`
 */
export type profilesCreateArgs = Prisma.profilesCreateArgs

/**
 * @deprecated Renamed to `Prisma.profilesUpdateArgs`
 */
export type profilesUpdateArgs = Prisma.profilesUpdateArgs

/**
 * @deprecated Renamed to `Prisma.profilesUpdateManyArgs`
 */
export type profilesUpdateManyArgs = Prisma.profilesUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.profilesUpsertArgs`
 */
export type profilesUpsertArgs = Prisma.profilesUpsertArgs

/**
 * @deprecated Renamed to `Prisma.profilesDeleteArgs`
 */
export type profilesDeleteArgs = Prisma.profilesDeleteArgs

/**
 * @deprecated Renamed to `Prisma.profilesDeleteManyArgs`
 */
export type profilesDeleteManyArgs = Prisma.profilesDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.runsWhereInput`
 */
export type runsWhereInput = Prisma.runsWhereInput

/**
 * @deprecated Renamed to `Prisma.runsOrderByInput`
 */
export type runsOrderByInput = Prisma.runsOrderByInput

/**
 * @deprecated Renamed to `Prisma.runsWhereUniqueInput`
 */
export type runsWhereUniqueInput = Prisma.runsWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.tracksWhereInput`
 */
export type tracksWhereInput = Prisma.tracksWhereInput

/**
 * @deprecated Renamed to `Prisma.tracksOrderByInput`
 */
export type tracksOrderByInput = Prisma.tracksOrderByInput

/**
 * @deprecated Renamed to `Prisma.tracksWhereUniqueInput`
 */
export type tracksWhereUniqueInput = Prisma.tracksWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.ridersWhereInput`
 */
export type ridersWhereInput = Prisma.ridersWhereInput

/**
 * @deprecated Renamed to `Prisma.ridersOrderByInput`
 */
export type ridersOrderByInput = Prisma.ridersOrderByInput

/**
 * @deprecated Renamed to `Prisma.ridersWhereUniqueInput`
 */
export type ridersWhereUniqueInput = Prisma.ridersWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.profilesWhereInput`
 */
export type profilesWhereInput = Prisma.profilesWhereInput

/**
 * @deprecated Renamed to `Prisma.profilesOrderByInput`
 */
export type profilesOrderByInput = Prisma.profilesOrderByInput

/**
 * @deprecated Renamed to `Prisma.profilesWhereUniqueInput`
 */
export type profilesWhereUniqueInput = Prisma.profilesWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.runsCreateInput`
 */
export type runsCreateInput = Prisma.runsCreateInput

/**
 * @deprecated Renamed to `Prisma.runsUpdateInput`
 */
export type runsUpdateInput = Prisma.runsUpdateInput

/**
 * @deprecated Renamed to `Prisma.runsUpdateManyMutationInput`
 */
export type runsUpdateManyMutationInput = Prisma.runsUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.tracksCreateInput`
 */
export type tracksCreateInput = Prisma.tracksCreateInput

/**
 * @deprecated Renamed to `Prisma.tracksUpdateInput`
 */
export type tracksUpdateInput = Prisma.tracksUpdateInput

/**
 * @deprecated Renamed to `Prisma.tracksUpdateManyMutationInput`
 */
export type tracksUpdateManyMutationInput = Prisma.tracksUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.ridersCreateInput`
 */
export type ridersCreateInput = Prisma.ridersCreateInput

/**
 * @deprecated Renamed to `Prisma.ridersUpdateInput`
 */
export type ridersUpdateInput = Prisma.ridersUpdateInput

/**
 * @deprecated Renamed to `Prisma.ridersUpdateManyMutationInput`
 */
export type ridersUpdateManyMutationInput = Prisma.ridersUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.profilesCreateInput`
 */
export type profilesCreateInput = Prisma.profilesCreateInput

/**
 * @deprecated Renamed to `Prisma.profilesUpdateInput`
 */
export type profilesUpdateInput = Prisma.profilesUpdateInput

/**
 * @deprecated Renamed to `Prisma.profilesUpdateManyMutationInput`
 */
export type profilesUpdateManyMutationInput = Prisma.profilesUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.StringFilter`
 */
export type StringFilter = Prisma.StringFilter

/**
 * @deprecated Renamed to `Prisma.IntNullableFilter`
 */
export type IntNullableFilter = Prisma.IntNullableFilter

/**
 * @deprecated Renamed to `Prisma.IntFilter`
 */
export type IntFilter = Prisma.IntFilter

/**
 * @deprecated Renamed to `Prisma.FloatNullableFilter`
 */
export type FloatNullableFilter = Prisma.FloatNullableFilter

/**
 * @deprecated Renamed to `Prisma.FloatFilter`
 */
export type FloatFilter = Prisma.FloatFilter

/**
 * @deprecated Renamed to `Prisma.Enumruns_lengthFilter`
 */
export type Enumruns_lengthFilter = Prisma.Enumruns_lengthFilter

/**
 * @deprecated Renamed to `Prisma.Enumruns_fault_sponginessFilter`
 */
export type Enumruns_fault_sponginessFilter = Prisma.Enumruns_fault_sponginessFilter

/**
 * @deprecated Renamed to `Prisma.RidersRelationFilter`
 */
export type RidersRelationFilter = Prisma.RidersRelationFilter

/**
 * @deprecated Renamed to `Prisma.runsRiderTrackNameCompoundUniqueInput`
 */
export type runsRiderTrackNameCompoundUniqueInput = Prisma.runsRiderTrackNameCompoundUniqueInput

/**
 * @deprecated Renamed to `Prisma.StringNullableFilter`
 */
export type StringNullableFilter = Prisma.StringNullableFilter

/**
 * @deprecated Renamed to `Prisma.Enumtracks_lengthNullableFilter`
 */
export type Enumtracks_lengthNullableFilter = Prisma.Enumtracks_lengthNullableFilter

/**
 * @deprecated Renamed to `Prisma.Enumtracks_fault_sponginessNullableFilter`
 */
export type Enumtracks_fault_sponginessNullableFilter = Prisma.Enumtracks_fault_sponginessNullableFilter

/**
 * @deprecated Renamed to `Prisma.RunsListRelationFilter`
 */
export type RunsListRelationFilter = Prisma.RunsListRelationFilter

/**
 * @deprecated Renamed to `Prisma.DateTimeFilter`
 */
export type DateTimeFilter = Prisma.DateTimeFilter

/**
 * @deprecated Renamed to `Prisma.ridersCreateOneWithoutRunsInput`
 */
export type ridersCreateOneWithoutRunsInput = Prisma.ridersCreateOneWithoutRunsInput

/**
 * @deprecated Renamed to `Prisma.NullableIntFieldUpdateOperationsInput`
 */
export type NullableIntFieldUpdateOperationsInput = Prisma.NullableIntFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.IntFieldUpdateOperationsInput`
 */
export type IntFieldUpdateOperationsInput = Prisma.IntFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.StringFieldUpdateOperationsInput`
 */
export type StringFieldUpdateOperationsInput = Prisma.StringFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.NullableFloatFieldUpdateOperationsInput`
 */
export type NullableFloatFieldUpdateOperationsInput = Prisma.NullableFloatFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.FloatFieldUpdateOperationsInput`
 */
export type FloatFieldUpdateOperationsInput = Prisma.FloatFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.Enumruns_lengthFieldUpdateOperationsInput`
 */
export type Enumruns_lengthFieldUpdateOperationsInput = Prisma.Enumruns_lengthFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.Enumruns_fault_sponginessFieldUpdateOperationsInput`
 */
export type Enumruns_fault_sponginessFieldUpdateOperationsInput = Prisma.Enumruns_fault_sponginessFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.ridersUpdateOneRequiredWithoutRunsInput`
 */
export type ridersUpdateOneRequiredWithoutRunsInput = Prisma.ridersUpdateOneRequiredWithoutRunsInput

/**
 * @deprecated Renamed to `Prisma.NullableStringFieldUpdateOperationsInput`
 */
export type NullableStringFieldUpdateOperationsInput = Prisma.NullableStringFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.NullableEnumtracks_lengthFieldUpdateOperationsInput`
 */
export type NullableEnumtracks_lengthFieldUpdateOperationsInput = Prisma.NullableEnumtracks_lengthFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.NullableEnumtracks_fault_sponginessFieldUpdateOperationsInput`
 */
export type NullableEnumtracks_fault_sponginessFieldUpdateOperationsInput = Prisma.NullableEnumtracks_fault_sponginessFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.runsCreateManyWithoutRidersInput`
 */
export type runsCreateManyWithoutRidersInput = Prisma.runsCreateManyWithoutRidersInput

/**
 * @deprecated Renamed to `Prisma.runsUpdateManyWithoutRidersInput`
 */
export type runsUpdateManyWithoutRidersInput = Prisma.runsUpdateManyWithoutRidersInput

/**
 * @deprecated Renamed to `Prisma.DateTimeFieldUpdateOperationsInput`
 */
export type DateTimeFieldUpdateOperationsInput = Prisma.DateTimeFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.NestedStringFilter`
 */
export type NestedStringFilter = Prisma.NestedStringFilter

/**
 * @deprecated Renamed to `Prisma.NestedIntNullableFilter`
 */
export type NestedIntNullableFilter = Prisma.NestedIntNullableFilter

/**
 * @deprecated Renamed to `Prisma.NestedIntFilter`
 */
export type NestedIntFilter = Prisma.NestedIntFilter

/**
 * @deprecated Renamed to `Prisma.NestedFloatNullableFilter`
 */
export type NestedFloatNullableFilter = Prisma.NestedFloatNullableFilter

/**
 * @deprecated Renamed to `Prisma.NestedFloatFilter`
 */
export type NestedFloatFilter = Prisma.NestedFloatFilter

/**
 * @deprecated Renamed to `Prisma.NestedEnumruns_lengthFilter`
 */
export type NestedEnumruns_lengthFilter = Prisma.NestedEnumruns_lengthFilter

/**
 * @deprecated Renamed to `Prisma.NestedEnumruns_fault_sponginessFilter`
 */
export type NestedEnumruns_fault_sponginessFilter = Prisma.NestedEnumruns_fault_sponginessFilter

/**
 * @deprecated Renamed to `Prisma.NestedStringNullableFilter`
 */
export type NestedStringNullableFilter = Prisma.NestedStringNullableFilter

/**
 * @deprecated Renamed to `Prisma.NestedEnumtracks_lengthNullableFilter`
 */
export type NestedEnumtracks_lengthNullableFilter = Prisma.NestedEnumtracks_lengthNullableFilter

/**
 * @deprecated Renamed to `Prisma.NestedEnumtracks_fault_sponginessNullableFilter`
 */
export type NestedEnumtracks_fault_sponginessNullableFilter = Prisma.NestedEnumtracks_fault_sponginessNullableFilter

/**
 * @deprecated Renamed to `Prisma.NestedDateTimeFilter`
 */
export type NestedDateTimeFilter = Prisma.NestedDateTimeFilter

/**
 * @deprecated Renamed to `Prisma.ridersCreateWithoutRunsInput`
 */
export type ridersCreateWithoutRunsInput = Prisma.ridersCreateWithoutRunsInput

/**
 * @deprecated Renamed to `Prisma.ridersCreateOrConnectWithoutrunsInput`
 */
export type ridersCreateOrConnectWithoutrunsInput = Prisma.ridersCreateOrConnectWithoutrunsInput

/**
 * @deprecated Renamed to `Prisma.ridersUpdateWithoutRunsInput`
 */
export type ridersUpdateWithoutRunsInput = Prisma.ridersUpdateWithoutRunsInput

/**
 * @deprecated Renamed to `Prisma.ridersUpsertWithoutRunsInput`
 */
export type ridersUpsertWithoutRunsInput = Prisma.ridersUpsertWithoutRunsInput

/**
 * @deprecated Renamed to `Prisma.runsCreateWithoutRidersInput`
 */
export type runsCreateWithoutRidersInput = Prisma.runsCreateWithoutRidersInput

/**
 * @deprecated Renamed to `Prisma.runsCreateOrConnectWithoutridersInput`
 */
export type runsCreateOrConnectWithoutridersInput = Prisma.runsCreateOrConnectWithoutridersInput

/**
 * @deprecated Renamed to `Prisma.runsUpdateWithWhereUniqueWithoutRidersInput`
 */
export type runsUpdateWithWhereUniqueWithoutRidersInput = Prisma.runsUpdateWithWhereUniqueWithoutRidersInput

/**
 * @deprecated Renamed to `Prisma.runsUpdateManyWithWhereWithoutRidersInput`
 */
export type runsUpdateManyWithWhereWithoutRidersInput = Prisma.runsUpdateManyWithWhereWithoutRidersInput

/**
 * @deprecated Renamed to `Prisma.runsScalarWhereInput`
 */
export type runsScalarWhereInput = Prisma.runsScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.runsUpsertWithWhereUniqueWithoutRidersInput`
 */
export type runsUpsertWithWhereUniqueWithoutRidersInput = Prisma.runsUpsertWithWhereUniqueWithoutRidersInput

/**
 * @deprecated Renamed to `Prisma.runsUpdateWithoutRidersInput`
 */
export type runsUpdateWithoutRidersInput = Prisma.runsUpdateWithoutRidersInput